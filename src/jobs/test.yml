description: |
  This job will automate running a set of backend/frontend tests.

parameters:
  # --------------------------------------------------------------------------------
  # REQUIRED PARAMETERS
  # You must provide a value for each of these parameters.
  # ---------------------------------------------------------------------------------

  # No required parameters defined

  # ---------------------------------------------------------------------------------
  # OPTIONAL PARAMETERS
  # These parameters have reasonable defaults.
  # ---------------------------------------------------------------------------------
  command:
    type: string
    default: test
    description: |
      The command used to run the tests. Defaults to nodes: 'npm run test'

  resource_class:
    type: enum
    enum: [       # vCPU  RAM (GB)
      "small",    # 1     2
      "medium",   # 2     4
      "medium+",  # 3     6
      "large",    # 4     8
      "xlarge"    # 8     16
    ]
    default: medium
    description: |
      The resource class that should be used to run tests. Defaults
      to medium 2 vCPU's and 4GB of RAM. See link for valid inputs:
      https://circleci.com/docs/2.0/configuration-reference/#docker-executor

  docker_image:
    type: enum
    enum: [
      "cimg/node@sha256:9e7dff70aee20446a146e374367c3fddc58df1e39cca318dbd4993e625892880",
      "cimg/node:16.18.1",
      "cimg/base:2022.12"
    ]
    default: "cimg/node@sha256:9e7dff70aee20446a146e374367c3fddc58df1e39cca318dbd4993e625892880"
    description: |
      The docker image to use for the tests.

  language:
    type: enum
    enum: ["node", "go"]
    default: "node"
    description: |
      The language the project is using.

docker:
  - image: <<parameters.docker_image>>
resource_class: <<parameters.resource_class>>

steps:
  - checkout
  - when:
      condition:
        equal: ["node", << parameters.language >> ]
      steps:
        - node/install-packages
        - run:
            name: Install JUnit coverage reporter
            command: yarn add --dev jest-junit
        - run:
            name: Run Tests
            command: |-
              npm run test -- --ci --runInBand --reporters=default --reporters=jest-junit
            environment:
              JEST_JUNIT_OUTPUT_DIR: ./reports/junit
        - store_test_results:
            path: ./reports/junit

  - when:
      condition:
        equal: ["go", << parameters.language >> ]
      steps:
        - go/install:
            version: "1.19"
        - go/load-cache
        - go/mod-download
        - go/save-cache
        - go/test
